using ATMS_Model;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.ServiceModel;
using System.Threading;

namespace ATMS_Server
{
    /*
     * This is the Server
     * 
     * The server implements the IServerInterface
     * 
     * A Service Behaviour must be set with the following arguments
     * [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Multiple)]
     * */
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Multiple)]
    public class MainSimulation : IServerInterface
    {
        //This holds the list of clients that are connected to the server
        private static List<IClientCallbackInterface> clients;

        //This is the main scenario
        private Scenario mainScenario;

        //This is the current server time in seconds
        int currentServerTime;

        //This is the currently available trackID (for incoming new tracks)
        int availableTrackID;

        //This is the Thread that runs the system time
        Thread timeThread;

        //This is a simulation pause flag
        bool pause;


        public MainSimulation()
        {
            //Initialize the list of clients
            clients = new List<IClientCallbackInterface>();

            //Initialize the mainScenario
            mainScenario = new Scenario();

            //currentServerTime & availableTrackID are initialized as 0
            currentServerTime = 0;
            availableTrackID = 0;
            pause = false;
        }


        #region Time, connection & debugging methods

        /*
         * Increments the currentServerTime using the BusinessLogicValues
         * and generates new plots if a track runs out of plots
         * */
        public void tickTock()
        {
            //Increment server time
            currentServerTime += ATMS_Model.BuisnessLogic.radarInterval;

            //Create a list of generated plots 
            List<Plot> generatedPlots = new List<Plot>();

            //Loop through tracks
            foreach (Track item in mainScenario.tracks)
            {
                //Find a missing plot
                Plot plotToLookInto = item.plots.FirstOrDefault(x => x.time == currentServerTime);

                if (plotToLookInto == null)
                {
                    //Find the last known plot
                    Plot lastKnownPlot = item.plots.FirstOrDefault(x => x.time == currentServerTime - ATMS_Model.BuisnessLogic.radarInterval);
                    if (lastKnownPlot != null)
                    {
                        //Generate the next plot and add it to the generatedPlots list
                        generatedPlots.Add(ATMS_Model.BuisnessLogic.generateNextLogicPlot(lastKnownPlot));
                    }
                }
            }

            //Check if there are any elements in the list
            if (generatedPlots.Count > 0)
            {
                //Add the plots to the right track on the server
                foreach (Plot item in generatedPlots)
                {
                    Track trackToAddTo = mainScenario.tracks.First(x => x.trackID == item.trackID);
                    if (trackToAddTo != null)
                    {
                        trackToAddTo.plots.Add(item);
                    }
                }

                //Call back towards the client with the generated Plots
                clients.ForEach(delegate(IClientCallbackInterface callback)
                    {
                        callback.createNewAutoGeneratedPlots(generatedPlots);
                    }
                );
            }

            //Call back towards the client with the reply
            clients.ForEach(delegate(IClientCallbackInterface callback)
                {
                    callback.notifyTimeUpdate(currentServerTime);
                }
            );
        }

        //Handles debugging message
        public void debugMessage(string explanation, Exception e)
        {
            Debug.WriteLine("ATMS/" + this.GetType().Name + "- " + explanation);
            Debug.WriteLine("Excpetion" + e);
            Debug.WriteLine("Stacktrace:" + e.StackTrace);
        }

        //Check if the client is already on the client list, if not - add it
        public void checkIfRegistered()
        {
            IClientCallbackInterface callback = OperationContext.Current.GetCallbackChannel<IClientCallbackInterface>();

            if (!clients.Contains(callback))
            {
                clients.Add(callback);
            }
        }

        #endregion

        /*
         * The implementation of the IServerInterface
         * */
        #region Service contracts implementation

        /*
         * Populate the newly connected client with any existing data on the Simulation
         * */
        public void populateClient()
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Instantiate the callback using the current channel
                IClientCallbackInterface callback = OperationContext.Current.GetCallbackChannel<IClientCallbackInterface>();

                //Call back towards the client with the reply
                callback.notifyNewScenario(mainScenario);
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to populate the client", e);
                throw new Exception("ATMS-MainSimulation-0001: Failed to populate the client.");
            }
        }

        /*
         * Create the main scenario and notify the connected clients
         * */
        public void createScenario()
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Create the new scenario
                mainScenario = new Scenario();
                               
                //Update the available ID
                availableTrackID = mainScenario.tracks.Count;

                //Call back towards the client with the reply
                clients.ForEach(delegate(IClientCallbackInterface callback)
                    {
                        callback.notifyNewScenario(mainScenario);
                    }
                );
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to create and send the scenario", e);
                throw new Exception("ATMS-MainSimulation-0002: Failed to create a new scenario");
            };
        }

        /*
         * Play the simulation
         * */
        public void playSimulation()
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Check if the simulation is paused
                if (pause == true)
                {
                    //Resume the thread
                    timeThread.Resume();
                    //Lower the pause flag
                    pause = false;
                }

                //Check if the timeThread is already  running
                else if (timeThread == null)
                {
                    //Instantiate the TimeWorker
                    TimeWorker worker = new TimeWorker(this);
                    if (worker != null)
                    {
                        //Call the DoWork method
                        timeThread = new Thread(worker.DoWork);
                        //Start the time worker thread which plays the simulatio
                        timeThread.Start();
                        pause = false;
                    }
                }
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to play the simulation", e);
                throw new Exception("ATMS-MainSimulation-0003: Failed to play the simulation");
            }
        }

        /**
         * Create a new track
         * */
        public void createNewTrack(Track t)
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Validate the input
                if (t == null)
                    t = new Track();

                //Assign an available ID and increment the availableTrackID
                t.trackID = availableTrackID;
                availableTrackID++;

                //Add the track to the main scenario
                mainScenario.tracks.Add(t);

                //Call back towards the client with the reply
                clients.ForEach(delegate(IClientCallbackInterface callback)
                    {
                        callback.notifyNewTrack(t);
                    }
                );
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to create a new track", e);
                throw new Exception("ATMS-MainSimulation-0004: Failed to create a new track");
            }
        }

        /**
         * Remove a track
         * */
        public void removeTrack(Track t)
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Validate the input
                if (t != null)
                {
                    //Remove the track 
                    mainScenario.tracks.Remove(t);

                    //Call back towards the client with the reply
                    clients.ForEach(delegate(IClientCallbackInterface callback)
                        {
                            callback.notifyRemoveTrack(t);
                        }
                    );
                }
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to remove the track", e);
                throw new Exception("ATMS-MainSimulation-0005: Failed to remove the track");
            }
        }

        /*
         * Edit a track
         * */
        public void editTrack(Track t)
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Validate the input
                if (t != null)
                {
                    //Reference the track that will be changed
                    Track trackToBeChanged = mainScenario.tracks.First(x => x.Equals(t));

                    //Validate that the track was found
                    if (trackToBeChanged != null)
                    {
                        //Edit the track
                        trackToBeChanged.edit(t);

                        //Call back towards the client with the reply
                        clients.ForEach(delegate(IClientCallbackInterface callback)
                            {
                                callback.notifyEditedTrack(t);
                            }
                        );
                    }
                }
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to edit the track", e);
                throw new Exception("ATMS-MainSimulation-0006: Failed to edit the track");
            }
        }

        /*
         * Create a new plot
         * */
        public void createNewPlot(Plot p)
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Validate the input
                if (p != null)
                {
                    //Reference the track that will hold the new plot
                    Track trackToBeAddedTo = mainScenario.tracks.First(x => x.trackID == p.trackID);

                    //Add the new plot
                    trackToBeAddedTo.plots.Add(p);

                    //Call back towards the client with the reply
                    clients.ForEach(delegate(IClientCallbackInterface callback)
                        {
                            callback.notifyNewPlot(p);
                        }
                    );
                }
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to create the plot", e);
                throw new Exception("ATMS-MainSimulation-0007: Failed to create the plot");
            }
        }

        /*
         * Remove a plot
         * */
        public void removePlot(Plot p)
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Validate the input
                if (p != null)
                {
                    //Reference the track where the plot will be removed from
                    Track trackToBeRemovedFrom = mainScenario.tracks.First(x => x.trackID == p.trackID);

                    //Remove the plot
                    trackToBeRemovedFrom.plots.Remove(p);

                    //Call back towards the client with the reply
                    clients.ForEach(delegate(IClientCallbackInterface callback)
                        {
                            callback.notifyRemovePlot(p);
                        }
                    );
                }
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to remove the plot", e);
                throw new Exception("ATMS-MainSimulation-0008: Failed to remove the plot");
            }
        }

        /*
         * Edit a plot
         * */
        public void editPlot(Plot p)
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Flag that indicates if a new plot is missing
                bool newPlot = false;

                //Validate the input
                if (p != null)
                {
                    //Reference the track where the plot will be removed from
                    Track trackToLookInto = mainScenario.tracks.First(x => x.trackID == p.trackID);

                    //Validate the trackToLookInto
                    if (trackToLookInto != null)
                    {

                        //Reference the plot that will be edited
                        Plot plotToBeChanged = null;

                        //Check if the server is playing 
                        if (timeThread != null)
                        {
                            /*
                             * Server is playing
                             * 
                             * */

                            //If the serveris playing - find the next plot
                            plotToBeChanged = trackToLookInto.plots.FirstOrDefault(x => x.time == currentServerTime + ATMS_Model.BuisnessLogic.radarInterval);

                            //If no plot was found - generate the next plot and store the changes in it
                            if (plotToBeChanged == null)
                            {
                                //Find the current plot to use to create the new plot
                                Plot currentPlot = trackToLookInto.plots.First(x => x.time == currentServerTime);

                                //Validate the current plot
                                if (currentPlot != null)
                                {
                                    //Generate a plot and reffer to it to the plot to be changed
                                    plotToBeChanged = ATMS_Model.BuisnessLogic.generateNextLogicPlot(currentPlot);

                                    //Add it to the server list
                                    trackToLookInto.plots.Add(plotToBeChanged);

                                    //Raise the newPlot flag
                                    newPlot = true;
                                }
                            }
                        }
                        else
                        {
                            /*
                             * Server is not playing
                             * 
                             * */

                            //Find the plot to be changed in the track plots list
                            plotToBeChanged = trackToLookInto.plots.FirstOrDefault(x => x.Equals(p));
                        }


                        //Edit the plot
                        if (plotToBeChanged != null)
                        {
                            //Add the information from the input plot
                            plotToBeChanged.edit(p);
                        }

                        //If the plot is new, we send it to the clients
                        if (newPlot)
                        {
                            //Send the newly create plot to the clients
                            clients.ForEach(delegate(IClientCallbackInterface callback)
                            {
                                callback.notifyNewPlot(plotToBeChanged);
                            }
                            );
                        }
                        else
                        {
                            //Else we send to the clients that the plot was just edited
                            clients.ForEach(delegate(IClientCallbackInterface callback)
                            {
                                callback.notifyEditedPlot(plotToBeChanged);
                            }
                            );
                        }


                        /*
                         * Remove all future plots because the changes made to the plot changed will effect all future plots
                         * First we need a list of all deleted plots then notify the clients of the removed plots and then remove them from the server list
                         **/

                        //Create a list of plots to be removed using linq
                        List<Plot> plotsToRemove = trackToLookInto.plots.Where(x => x.time > plotToBeChanged.time + ATMS_Model.BuisnessLogic.radarInterval).ToList();

                        //Notify the clients of the future plots to remove
                        clients.ForEach(delegate(IClientCallbackInterface callback)
                        {
                            callback.notifyRemovePlots(plotsToRemove);
                        }
                        );

                        //Remove the plots from the server list
                        foreach (Plot plotToRemove in plotsToRemove)
                        {
                            trackToLookInto.plots.Remove(plotToRemove);
                        }

                    }
                }
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to edit the plot", e);
                throw new Exception("ATMS-MainSimulation-0009: Failed to edit the plot");
            }
        }

        /*
         * Play the simulation
         * */
        public void pauseSimulation()
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //check if the timeThread is already  running
                if (timeThread != null)
                {
                    //Suspend the thread
                    timeThread.Suspend();
                    //Raise the pause thread
                    pause = true;
                }
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to stop the simulation", e);
                throw new Exception("ATMS-MainSimulation-0010: Failed to stop the simulation");
            }
        }

        /**
         * Create a new track from the map
         * */
        public void createNewTrackOnMap(Plot p)
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Validate the input
                if (p != null)
                {
                    //Assign an available ID to both the plot and the track
                    //and prepare them with default values.
                    p.trackID = availableTrackID;
                    p.altitude = ATMS_Model.BuisnessLogic.altitude;
                    p.course = ATMS_Model.BuisnessLogic.course;
                    p.speed = ATMS_Model.BuisnessLogic.speed;
                    p.time = currentServerTime;

                    Track t = new Track();
                    t.trackID = availableTrackID;
                    t.SSR = ATMS_Model.BuisnessLogic.SSR;
                    t.WTC = ATMS_Model.BuisnessLogic.WTC;
                    t.ArType = ATMS_Model.BuisnessLogic.ArType;
                    t.ADEP = ATMS_Model.BuisnessLogic.ADEP;
                    t.ADES = ATMS_Model.BuisnessLogic.ADES;
                    t.plots.Add(p);

                    //Increment the available trackID
                    availableTrackID++;

                    //Add the track to the main scenario
                    mainScenario.tracks.Add(t);

                    //Call back towards the client with the reply
                    clients.ForEach(delegate(IClientCallbackInterface callback)
                    {
                        callback.notifyNewTrack(t);
                    }
                    );
                }
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to create a new track on the map", e);
                throw new Exception("ATMS-MainSimulation-0011: Failed to create a new track on the map");
            }
        }

        /*
         * Create a new waypoint
         * */
        public void createNewWaypoint(Plot p, Plot oldPlot)
        {
            try
            {
                //Check the client registration
                checkIfRegistered();

                //Validate the input
                if (p != null && oldPlot != null)
                {
                    //Reference the track that will hold the new plot
                    Track trackToBeAddedTo = mainScenario.tracks.First(x => x.trackID == p.trackID);

                    //Prepare the new plot and edit the old plot
                    p.altitude = oldPlot.altitude;
                    p.speed = oldPlot.speed;
                    p.time = (int)ATMS_Model.BuisnessLogic.findTimeOfNewPlot(p, oldPlot);

                    Plot oldPlotReference = trackToBeAddedTo.plots.Find(x => x.Equals(oldPlot));
                    if (oldPlotReference != null)
                    {
                        oldPlotReference.course = ATMS_Model.BuisnessLogic.calculateOldPlotCourse(p, oldPlotReference);
                        p.course = oldPlotReference.course;

                        //Call back towards the client with the reply
                        clients.ForEach(delegate(IClientCallbackInterface callback)
                        {
                            callback.notifyEditedPlot(oldPlotReference);
                        }
                        );
                    }

                    //Add the new plot
                    trackToBeAddedTo.plots.Add(p);

                    //Call back towards the client with the reply
                    clients.ForEach(delegate(IClientCallbackInterface callback)
                    {
                        callback.notifyNewPlot(p);
                    }
                    );
                }
            }
            catch (Exception e)
            {
                //Catch and report the exception
                debugMessage("Failed to create the waypoint", e);
                throw new Exception("ATMS-MainSimulation-0012: Failed to create the waypoint");
            }
        }

        #endregion
    }
}
